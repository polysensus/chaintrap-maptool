---
version: '3'
silent: true

env:
  ENV: .local/dev
  PROFILE: '{{.PROFILE | default ""}}'
  # This override is provided so that the generate task can be used to
  # quick start consumers of this repository with useful defaults.
  K8S_GENERATE_DIR: '{{.K8S_GENERATE_DIR | default "k8s/tmp"}}'

vars:
  BUILD_ARTIFACTS: k8s/tmp/skaffold/build-artifacts.json

dotenv: [".env", '{{.ENV}}/.env', '{{.HOME}}/.env']

tasks:

  bootstrap:
    desc: |
      creates the {{.ENV}}/.env file and installs tooling. assumes a debain
      like system (but uses python or brew where possible). for other platforms
      run `task bootstrap --sumarize` and use the results to find the right
      bits.  Note that .env (in the directory containing this Taskfile) is
      never created or touched in anyway and has the highest precedence

      NOTICE: to re-create {{.ENV}}/.env you MUST delete it first (else it will
      be re-created with the same values

    cmds:
      - |
        mkdir -p {{.ENV}}

        CONTEXT=${CONTEXT:-$(kubectl config current-context)}
        CLUSTER=$(kubectl config get-contexts ${CONTEXT} --no-headers=true | tr -s ' ' | cut -d ' ' -f3)
        SKAFFOLD_DEFAULT_REPO=${SKAFFOLD_DEFAULT_REPO:-eu.gcr.io/${CONTEXT}}
        CONTEXT_NAMESPACE=${CONTEXT_NAMESPACE:-$(echo ${CONTEXT} | cut -d '-' -f1)}
        NAMESPACE=${NAMESPACE:-${CONTEXT_NAMESPACE}-${APPNAME}}
        DOMAIN=${DOMAIN:-localhost}

        cat <<EOF > {{.ENV}}/.env
        CONTEXT=${CONTEXT}
        CLUSTER=${CLUSTER}
        SKAFFOLD_DEFAULT_REPO=${SKAFFOLD_DEFAULT_REPO}
        CONTEXT_NAMESPACE=${CONTEXT_NAMESPACE}
        NAMESPACE=${NAMESPACE}
        APPNAME=${APPNAME}
        PYENV=${PYENV}
        PORT=${PORT}
        HOST=${HOST}
        DOMAIN=${DOMAIN}
        EOF

    env:
      CONTEXT: "{{.CONTEXT}}"
      CONTEXT_NAMESPACE: "{{.CONTEXT_NAMESPACE}}"
      NAMESPACE: "{{.NAMESPACE}}"
      TAG: "{{.TAG}}"
      SKAFFOLD_DEFAULT_REPO: "{{.SKAFFOLD_DEFAULT_REPO}}"
      APPNAME: '{{.APPNAME | default "chaintrap-maptool"}}'
      PYENV: '{{.PYENV | default "env"}}'
      PROFILE: '{{.PROFILE | default "local"}}'
      PORT: '{{.PORT | default "8000"}}'
      HOST: '{{.HOST | default "http://127.0.0.1:8000"}}'
      DOMAIN: '{{.DOMAIN | default "localhost"}}'

  generate:
    desc: 'generate context dependent manifests and secrets and so on'
    cmds:
      - |
        mkdir -p {{.K8S_GENERATE_DIR}}/dev
        mkdir -p $(dirname {{.BUILD_ARTIFACTS}})

        cat <<EOF > {{.K8S_GENERATE_DIR}}/dev/namespace.yaml
        kind: Namespace
        apiVersion: v1
        metadata:
          name: ${NAMESPACE}
        EOF
        cat <<EOF > {{.K8S_GENERATE_DIR}}/dev/kustomization.yaml
        namespace: ${NAMESPACE}
        resources:
          - ./namespace.yaml
          - ./../../$APPNAME
        EOF

    generates:
      - "{{.K8S_GENERATE_DIR}}/dev/kustomization.yaml"
      - "{{.K8S_GENERATE_DIR}}/dev/namespace.yaml"

  build:
    desc: 'build the images'
    cmds:
      - |
        skaffold build \
          ${PROFILE:+-p $PROFILE} \
          ${TAG:+-t $TAG} \
          --file-output {{.BUILD_ARTIFACTS}}
    vars:
      TAG: '{{.TAG | default (env "TAG") }}'
      PROFILE: '{{.PROFILE | default ""}}'

  cd-build:
    desc: "cd entry point for build (runs generate)"
    cmds:
      - task: generate
      - task: build

  dev:run:
    cmds:
      - |
        pipenv run uvicorn service.main:app --reload --log-level debug

  deploy:
    desc: 'deploy the app using skaffold'
    precondition:
      - test: -f {{.BUILD_ARTIFACTS}}
        msg: "{{.BUILD_ARTIFACTS}} is missing, run `task build` first"
    cmds:
      - |
        skaffold deploy \
            ${CONTEXT:+--kube-context ${CONTEXT}} \
            ${NAMESPACE:+-n $NAMESPACE} \
            --label=user-deploy=$USER-$APPNAME \
            --build-artifacts {{.BUILD_ARTIFACTS}}

  down:
    desc: 'take the app down and clean up the k8s resources'
    cmds:
      - |
        # -l skaffold.dev/run-id=1ea50cc3-294e-499b-ad59-876378d59ee7
        for resource in $(kubectl api-resources --verbs=list --namespaced -o name); do
          for target in $(kubectl get \
            --show-kind \
            -l user-deploy=$USER-$APPNAME \
            --ignore-not-found \
            -n $NAMESPACE \
            -o name ${resource} 2> /dev/null); do
            echo $target
            kubectl delete $target -n $NAMESPACE
          done
        done

  pf:
    desc: 'port forward to $APPNAME'
    cmds:
      - |
        POD=$($KUBECTL -n $NAMESPACE get pod \
           --selector=app=$APPNAME \
           --no-headers -o custom-columns=":metadata.name")
        $KUBECTL -n $NAMESPACE port-forward pod/$POD $PORT

  logs:
    desc: 'port forward to $APPNAME'
    cmds:
      - |
        POD=$($KUBECTL -n $NAMESPACE get pod \
           --selector=app=$APPNAME \
           --no-headers -o custom-columns=":metadata.name")
        echo $POD
        # {{.KUBECTL}} -n {{.N}} port-forward --address localhost pod/$POD 8080
        $KUBECTL -n $NAMESPACE logs $POD {{.CLI_ARGS}}
